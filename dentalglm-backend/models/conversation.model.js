import mongoose from 'mongoose';

// Message schema for storing individual messages in the conversation 
const messageSchema = new mongoose.Schema({
    sender: {
        type: String,
        // Enumerated Data Type For Message Sender
        enum: ['user', 'llm'],
        required: true
    },
    content: {
        type: String,
        required: true
    },
    timestamp: {
        type: Date,
        // Automatically set current date and time
        default: Date.now,
    }
});

// Patient schema for storing the properties contained in the JSON generated by the LLM
const patientSchema = new mongoose.Schema({
    Patient_Name: {
        type: String,
        required: true
    },
    Patient_Age: {
        type: Number,
        required: true
    },
    Patient_Gender: {
        type: String,
        required: true
    },
    Reason_For_Visit: {
        type: String,
        required: true
    },
    Patient_Emotional_State: {
        type: String,
        required: true
    },
    Patient_Characteristics: {
        type: String,
        required: true
    },
    Patient_Symptoms: {
        type: String,
        required: true
    },
    Patient_Medical_History: {
        type: String,
        required: true
    }
});

// Feedback schema for storing array of feedback entries
const feedbackSchema = new mongoose.Schema({
    sender: {
        type: String,
        enum: ['llm', 'instructor'],
        required: true
    },
    feedback: {
        type: mongoose.Schema.Types.Mixed,
        required: true
    },
    timestamp: {
        type: Date,
        default: Date.now,
    }
});

// System Properties schema to maintain the status and UI features
const systemPropertiesSchema = new mongoose.Schema({
    status: {
        type: String,
        required: true
    },
    initials: {
        type: String,
        required: true
    },
    colour: {
        type: String,
        required: true
    }
});

// Conversation schema to encapsulate all the schemas
const conversationSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    messages: [messageSchema],
    patient: patientSchema,
    systemProperties: systemPropertiesSchema,
    feedback: [feedbackSchema],
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
});

const Conversation = mongoose.model('Conversation', conversationSchema);

export default Conversation;